// Generated by CoffeeScript 1.4.0
(function() {
  var Document, Element, EventEmitter, Parser, Selector, _,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Parser = require('./parser');

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  Document = (function() {

    function Document(elt) {
      this.documentElement = typeof elt === 'string' ? (elt = this.createElement(Parser.parse(elt)), elt.setOwnerDocument(this), elt) : elt instanceof Element ? elt.setOwnerDocument(this) : (elt = this.createElement(elt), elt.setOwnerDocument(this), elt);
      this._data = {};
    }

    Document.prototype.data = function(key, val) {
      var res;
      if (arguments.length === 1) {
        res = this._data[key];
        if (res) {
          return res;
        } else {
          return void 0;
        }
      } else {
        return this._data[key] = val;
      }
    };

    Document.prototype.createElement = function(_arg, parent) {
      var attributes, children, element, elt, html;
      element = _arg.element, attributes = _arg.attributes, children = _arg.children;
      if (parent == null) {
        parent = null;
      }
      elt = this.initialize(element, attributes, children, parent);
      if (element === 'script') {
        html = elt.html();
        elt.empty();
        elt.append(html);
      }
      return elt;
    };

    Document.prototype.initialize = function(tag, attrs, children, parent) {
      var child, childElement, element, _i, _len;
      element = new Element(tag, attrs, null, parent);
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        if (typeof child === 'string') {
          element.append(child);
        } else {
          childElement = this.createElement(child, element);
          element.append(childElement);
        }
      }
      element.setOwnerDocument(this);
      return element;
    };

    Document.prototype.bind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Document.prototype.on = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Document.prototype.unbind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Document.prototype.clone = function() {
      return new Document(this.documentElement.clone());
    };

    Document.prototype.html = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.documentElement).html.apply(_ref, args);
    };

    return Document;

  })();

  Element = (function(_super) {

    __extends(Element, _super);

    function Element(tag, attributes, _parent, ownerDocument) {
      this._parent = _parent;
      this.ownerDocument = ownerDocument;
      this.tag = tag;
      this.attributes = attributes;
      this._data = {};
      this._children = [];
    }

    Element.prototype.clone = function() {
      var child, elt, _i, _len, _ref;
      elt = this.ownerDocument.createElement({
        element: this.tag,
        attributes: _.extend({}, this.attributes),
        children: []
      });
      _ref = this._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child instanceof Element) {
          elt.append(child.clone());
        } else {
          elt.append(child);
        }
      }
      return elt;
    };

    Element.prototype.setOwnerDocument = function(doc) {
      var child, _i, _len, _ref, _results;
      if (!(doc instanceof Document)) {
        throw new Error("element.setOwnerDocument_not_document: " + doc);
      }
      this.ownerDocument = doc;
      _ref = this._children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child instanceof Element) {
          _results.push(child.setOwnerDocument(doc));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Element.prototype.parent = function() {
      return this._parent;
    };

    Element.prototype.children = function() {
      return _.filter(this._children, function(elt) {
        return elt instanceof Element;
      });
    };

    Element.prototype.removeChild = function(element) {
      this._children = _.without(this._children, element);
      return element._parent = null;
    };

    Element.prototype.detach = function() {
      if (this._parent) {
        return this._parent.removeChild(this);
      }
    };

    Element.prototype.append = function(elt, after) {
      var index;
      if (elt instanceof Element) {
        elt.detach();
        elt._parent = this;
      }
      if (after) {
        index = this._children.indexOf(after);
        return this._children.splice(index, 0, elt);
      } else {
        return this._children.push(elt);
      }
    };

    Element.prototype.prepend = function(elt, before) {
      var index;
      if (elt instanceof Element) {
        elt.detach();
        elt._parent = this;
      }
      if (before) {
        index = this._children.indexOf(before) - 1;
        if (index > -1) {
          return this._children.splice(index, 0, elt);
        } else {
          return this._children.unshift(elt);
        }
      } else {
        return this._children.unshift(elt);
      }
    };

    Element.prototype.after = function(elt) {
      return this._parent.append(elt, this);
    };

    Element.prototype.attr = function(key, val) {
      if (arguments.length === 1) {
        if (this.attributes.hasOwnProperty(key)) {
          return this.attributes[key];
        } else {
          return void 0;
        }
      } else {
        return this.attributes[key] = val;
      }
    };

    Element.prototype.removeAttr = function(key) {
      return delete this.attributes[key];
    };

    Element.prototype.data = function(key, val) {
      var res;
      if (arguments.length === 1) {
        res = this.attr("data-" + key);
        if (res) {
          return res;
        } else {
          return this._data[key];
        }
      } else {
        return this._data[key] = val;
      }
    };

    Element.prototype.getClasses = function() {
      var val;
      val = this.attr('class');
      return val.split(' ');
    };

    Element.prototype.setClasses = function(classes) {
      return this.attr('class', classes.join(' '));
    };

    Element.prototype.addClass = function(key) {
      var classes;
      classes = this.getClasses();
      classes.push(key);
      return this.setClasses(classes);
    };

    Element.prototype.removeClass = function(key) {
      var classes;
      classes = this.getClasses();
      return this.setClasses(_.without(classes, key));
    };

    Element.prototype.html = function(str) {
      var child, elt, results, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (arguments.length === 0) {
        results = [];
        _ref = this._children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (typeof child === 'string') {
            results.push(child);
          } else {
            results.push(child.toString());
          }
        }
        return results.join('');
      } else {
        elt = Parser.parse('<div>' + str + '</div>');
        this.empty();
        _ref1 = elt.children;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          if (typeof child === 'string') {
            _results.push(this.append(child));
          } else {
            _results.push(this.append(this.ownerDocument.createElement(child, this)));
          }
        }
        return _results;
      }
    };

    Element.prototype.getCSS = function() {
      var key, keyval, result, val, _i, _len, _ref, _ref1;
      result = {};
      _ref = this.attr('style').split(/\s*;\s*/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        keyval = _ref[_i];
        _ref1 = keyvals.split(/\s*=\s*/), key = _ref1[0], val = _ref1[1];
        result[key] = val;
      }
      return result;
    };

    Element.prototype.setCSS = function(keyvals) {
      var key, result, val;
      result = [];
      for (key in keyvals) {
        val = keyvals[key];
        result.push = "" + key + "=" + val;
      }
      return this.attr('style', result.join(";"));
    };

    Element.prototype.css = function(key, val) {
      var keyvals, result;
      if (arguments.length === 0) {
        throw new Error(".css_expects_at_least_1_arg");
      } else if (arguments.length === 1) {
        if (typeof key === 'string') {
          result = this.getCSS();
          return result[key];
        } else if (key instanceof Object) {
          return this.setCSS(key);
        } else {
          throw new Error("unsupported_css_argument: " + key);
        }
      } else {
        keyvals = this.getCSS();
        keyvals[key] = val;
        return this.setCSS(keyvals);
      }
    };

    Element.prototype.toString = function(buffer) {
      var child, _i, _len, _ref;
      if (buffer == null) {
        buffer = [];
      }
      if (this._children.length === 0) {
        buffer.push("<" + this.tag + " " + (this.attrsToString()) + " />");
      } else {
        buffer.push("<" + this.tag + " " + (this.attrsToString()) + ">");
        _ref = this._children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (typeof child === 'string') {
            buffer.push(child);
          } else {
            buffer.push(child.toString());
          }
        }
        buffer.push("</" + this.tag + ">");
      }
      return buffer.join('');
    };

    Element.prototype.eltHTML = function() {
      return "<" + this.tag + " " + (this.attrsToString()) + " />";
    };

    Element.prototype.hasBinding = function() {
      return this.bindings !== null;
    };

    Element.prototype.attrsToString = function() {
      var buffers, key, val;
      buffers = (function() {
        var _ref, _results;
        _ref = this.attributes;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push("" + key + " = " + (this.escape(val)));
        }
        return _results;
      }).call(this);
      return buffers.join(' ');
    };

    Element.prototype.empty = function() {
      var child, i, _i, _len, _ref;
      _ref = this._children;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        child = _ref[i];
        if (child instanceof Element) {
          child.empty();
          child._parent = null;
        }
      }
      return this._children = [];
    };

    Element.prototype.escape = function(str) {
      return JSON.stringify(str.toString());
    };

    Element.prototype.bind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Element.prototype.unbind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Element.prototype.on = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    return Element;

  })(EventEmitter);

  Document.Element = Element;

  Selector = (function() {

    Selector.parse = function(stmt) {
      return new Selector(stmt);
    };

    function Selector(stmt) {
      this.select = Parser.parse(stmt).select;
      this.matchExp = this.compile(this.select);
    }

    Selector.prototype.negate = function() {
      var origMatchExp;
      origMatchExp = this.matchExp;
      this.matchExp = function(element) {
        return !origMatchExp(element);
      };
      return this.select.not = this.select.hasOwnProperty('not') ? !this.select.not : true;
    };

    Selector.prototype.run = function(elt, includSelf) {
      var result;
      if (includSelf == null) {
        includSelf = false;
      }
      result = [];
      this.match(elt, result, includSelf);
      return result;
    };

    Selector.prototype.match = function(element, result, includeSelf) {
      var child, _i, _len, _ref, _results;
      if (includeSelf == null) {
        includeSelf = false;
      }
      if (element instanceof Document) {
        element = element.documentElement;
      }
      if (includeSelf) {
        this.matchOne(element, result);
      }
      _ref = element.children();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(this.match(child, result, true));
      }
      return _results;
    };

    Selector.prototype.matchOne = function(element, result) {
      var res;
      res = this.matchExp(element);
      if (res) {
        result.push(element);
        return true;
      } else {
        return false;
      }
    };

    Selector.prototype.compile = function(selectExp) {
      if (selectExp instanceof Array) {
        return this.compileArray(selectExp);
      } else {
        return this.compileOne(selectExp);
      }
    };

    Selector.prototype.compileArray = function(selectExp) {
      var inner, matchExps,
        _this = this;
      matchExps = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selectExp.length; _i < _len; _i++) {
          inner = selectExp[_i];
          _results.push(this.compile(inner));
        }
        return _results;
      }).call(this);
      return function(element) {
        var match, _i, _len;
        for (_i = 0, _len = matchExps.length; _i < _len; _i++) {
          match = matchExps[_i];
          if (match(element)) {
            return true;
          }
        }
        return false;
      };
    };

    Selector.prototype.compileOne = function(exp) {
      var attrExp, classExp, eltExp, idExp;
      eltExp = this.compileTag(exp.elt);
      idExp = this.compileID(exp.id);
      classExp = this.compileClass(exp["class"]);
      attrExp = this.compileAttr(exp.attr);
      return function(element) {
        return eltExp(element) && idExp(element) && classExp(element) && attrExp(element);
      };
    };

    Selector.prototype.compileTag = function(tag) {
      if (tag === '*') {
        return function(element) {
          return true;
        };
      } else {
        return function(element) {
          return element.tag === tag;
        };
      }
    };

    Selector.prototype.compileID = function(id) {
      if (id instanceof Array) {
        return function(element) {
          return _.contains(id, element.attributes['id']);
        };
      } else if (typeof id === 'string') {
        return function(element) {
          return element.attributes['id'] === id;
        };
      } else {
        return function(element) {
          return true;
        };
      }
    };

    Selector.prototype.compileClass = function(classes) {
      var classExps, cls;
      if (classes instanceof Array) {
        classExps = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = classes.length; _i < _len; _i++) {
            cls = classes[_i];
            _results.push(this.compileOneClass(cls));
          }
          return _results;
        }).call(this);
        return function(element) {
          var classExp, _i, _len;
          for (_i = 0, _len = classExps.length; _i < _len; _i++) {
            classExp = classExps[_i];
            if (classExp(element)) {
              return true;
            }
          }
          return false;
        };
      } else if (typeof classes === 'string') {
        return this.compileOneClass(classes);
      } else {
        return function(element) {
          return true;
        };
      }
    };

    Selector.prototype.compileOneClass = function(cls) {
      return function(element) {
        var eltClasses;
        eltClasses = element.getClasses();
        return _.contains(eltClasses, cls);
      };
    };

    Selector.prototype.compileAttr = function(attrs) {
      var attr, attrExps;
      if (attrs instanceof Array) {
        attrExps = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = attrs.length; _i < _len; _i++) {
            attr = attrs[_i];
            _results.push(this.compileOneAttr(attr));
          }
          return _results;
        }).call(this);
        return function(element) {
          var attrExp, _i, _len;
          for (_i = 0, _len = attrExps.length; _i < _len; _i++) {
            attrExp = attrExps[_i];
            if (!attrExp(element)) {
              return false;
            }
          }
          return true;
        };
      } else if (attrs instanceof Object) {
        return this.compileOneAttr(attrs);
      } else {
        return function(element) {
          return true;
        };
      }
    };

    Selector.prototype.compileOneAttr = function(_arg) {
      var attr, op, regex, val, valExp;
      attr = _arg.attr, op = _arg.op, val = _arg.val;
      valExp = (function() {
        if (val) {
          if (op === '=') {
            return function(attr) {
              return attr === val;
            };
          } else if (op === '~=') {
            regex = new RegExp(val);
            return function(attr) {
              return attr.match(regex);
            };
          } else if (op === '^=') {
            regex = new RegExp("^" + val);
            return function(attr) {
              return attr.match(regex);
            };
          } else if (op === "$=") {
            regex = new RegExp("" + val + "$");
            return function(attr) {
              return attr.match(regex);
            };
          } else {
            throw new Error("unsupported_attribute_selector: " + attr + op + val);
          }
        } else {
          return function(attr) {
            return true;
          };
        }
      })();
      return function(element) {
        if (!element.attributes.hasOwnProperty(attr)) {
          return false;
        }
        return valExp(element.attributes[attr]);
      };
    };

    return Selector;

  })();

  Document.Selector = Selector;

  module.exports = Document;

}).call(this);
