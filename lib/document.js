// Generated by CoffeeScript 1.4.0
(function() {
  var Document, EventEmitter, Node, XmlParser, entities, htmlParser, loglet, parse2, _,
    __slice = [].slice;

  XmlParser = require('../grammar/xml');

  htmlParser = require('htmlparser2');

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  loglet = require('loglet');

  Node = require('./node');

  entities = require('./entities');

  parse2 = function(data) {
    return XmlParser.parse(data);
  };

  Document = (function() {

    Document.createElement = function(_arg) {
      var Element, attributes, children, element;
      element = _arg.element, attributes = _arg.attributes, children = _arg.children;
      Element = Node.type(Node.ELEMENT_NODE);
      return new Element(element, attributes, children);
    };

    function Document(elt) {
      var elementType;
      elementType = Node.type(Node.ELEMENT_NODE);
      this.documentElement = elt instanceof elementType ? (elt.setOwnerDocument(this), elt) : (elt = this.createElement(elt), elt.setOwnerDocument(this), elt);
      this._data = {};
    }

    Document.prototype.destroy = function() {
      return this.documentElement.destroy();
    };

    Document.prototype.data = function(key, val) {
      var res;
      if (arguments.length === 1) {
        res = this._data[key];
        if (res) {
          return res;
        } else {
          return void 0;
        }
      } else {
        return this._data[key] = val;
      }
    };

    Document.prototype.children = function() {
      return [this.documentElement];
    };

    Document.prototype.createElement = function(_arg, parent) {
      var attributes, children, element, elt, html;
      element = _arg.element, attributes = _arg.attributes, children = _arg.children;
      if (parent == null) {
        parent = null;
      }
      elt = this.initialize(element, attributes, children, parent);
      if (element === 'script') {
        html = elt.html();
        elt.empty();
        elt.append(html);
      }
      return elt;
    };

    Document.prototype.initialize = function(tag, attrs, children, parent) {
      var Element, child, childElement, element, _i, _len, _ref;
      Element = Node.type(Node.ELEMENT_NODE);
      element = new Element(tag, attrs, parent);
      _ref = children || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          element.append(child);
        } else {
          childElement = this.createElement(child, element);
          element.append(childElement);
        }
      }
      element.setOwnerDocument(this);
      return element;
    };

    Document.prototype.bind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Document.prototype.on = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Document.prototype.unbind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Document.prototype.clone = function() {
      return new Document(this.documentElement.clone());
    };

    Document.prototype.html = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.documentElement).html.apply(_ref, args);
    };

    Document.prototype.outerHTML = function() {
      var args, _ref, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.documentElement.isFragment()) {
        return (_ref = this.documentElement).html.apply(_ref, args);
      } else {
        return (_ref1 = this.documentElement).outerHTML.apply(_ref1, args);
      }
    };

    Document.prototype.toJSON = function() {
      return this.documentElement.toJSON();
    };

    Document.prototype.serialize = function(options) {
      return this.documentElement.serialize(options);
    };

    return Document;

  })();

  Node.register(Node.DOCUMENT_NODE, Document);

  module.exports = Document;

}).call(this);
