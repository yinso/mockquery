// Generated by CoffeeScript 1.4.0
(function() {
  var Document, Element, EventEmitter, Node, XmlParser, entities, htmlParser, loglet, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  XmlParser = require('../grammar/xml');

  htmlParser = require('htmlparser2');

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  loglet = require('loglet');

  Node = require('./node');

  entities = require('./entities');

  Document = require('./document');

  Element = (function(_super) {

    __extends(Element, _super);

    function Element(tag, attributes, children) {
      var child, _i, _len;
      if (children == null) {
        children = [];
      }
      this.tag = tag;
      this.attributes = attributes;
      this._data = {};
      this._children = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        this.append(child);
      }
    }

    Element.prototype.isFragment = function() {
      return this.tag === '__';
    };

    Element.prototype.destroy = function() {
      var child, _i, _len, _ref;
      delete this.ownerDocument;
      delete this._parent;
      _ref = this._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child instanceof Element) {
          child.destroy();
        }
      }
      return delete this._children;
    };

    Element.prototype.clone = function() {
      var child, documentType, elt, _i, _len, _ref;
      documentType = Node.type(Node.DOCUMENT_NODE);
      elt = new Element(this.tag, _.extend({}, this.attributes));
      if (this.ownerDocument instanceof documentType) {
        elt.setOwnerDocument(this.ownerDocument);
      }
      _ref = this._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child instanceof Element) {
          elt.append(child.clone());
        } else {
          elt.append(child);
        }
      }
      return elt;
    };

    Element.prototype.setOwnerDocument = function(doc) {
      var child, documentType, _i, _len, _ref, _results;
      documentType = Node.type(Node.DOCUMENT_NODE);
      if (!(doc instanceof documentType)) {
        throw new Error("element.setOwnerDocument_not_document: " + doc);
      }
      this.ownerDocument = doc;
      _ref = this._children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child instanceof Element) {
          _results.push(child.setOwnerDocument(doc));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Element.prototype.parent = function() {
      return this._parent;
    };

    Element.prototype.children = function() {
      return _.filter(this._children, function(elt) {
        return elt instanceof Element;
      });
    };

    Element.prototype.removeChild = function(element) {
      this._children = _.without(this._children, element);
      return element._parent = null;
    };

    Element.prototype.detach = function() {
      if (this._parent) {
        return this._parent.removeChild(this);
      }
    };

    Element.prototype.append = function(elt, after) {
      var index;
      if (elt instanceof Element) {
        elt.detach();
        elt._parent = this;
      }
      if (after) {
        index = this._children.indexOf(after);
        return this._children.splice(index + 1, 0, elt);
      } else {
        return this._children.push(elt);
      }
    };

    Element.prototype.prepend = function(elt, before) {
      var index;
      if (elt instanceof Element) {
        elt.detach();
        elt._parent = this;
      }
      if (before) {
        index = this._children.indexOf(before) - 1;
        if (index > -1) {
          return this._children.splice(index, 0, elt);
        } else {
          return this._children.unshift(elt);
        }
      } else {
        return this._children.unshift(elt);
      }
    };

    Element.prototype.after = function(elt) {
      return this._parent.append(elt, this);
    };

    Element.prototype.attr = function(key, val) {
      if (arguments.length === 1) {
        if (this.attributes.hasOwnProperty(key)) {
          return this.attributes[key];
        } else {
          return void 0;
        }
      } else {
        return this.attributes[key] = val;
      }
    };

    Element.prototype.removeAttr = function(key) {
      return delete this.attributes[key];
    };

    Element.prototype.data = function(key, val) {
      var res;
      if (arguments.length === 1) {
        res = this.attr("data-" + key);
        if (res) {
          return res;
        } else {
          return this._data[key];
        }
      } else {
        return this._data[key] = val;
      }
    };

    Element.prototype.getClasses = function() {
      var val;
      val = this.attr('class');
      if (val) {
        return val.split(/\s+/);
      } else {
        return [];
      }
    };

    Element.prototype.setClasses = function(classes) {
      return this.attr('class', classes.join(' '));
    };

    Element.prototype.addClass = function(key) {
      var classes;
      classes = this.getClasses();
      classes.push(key);
      return this.setClasses(classes);
    };

    Element.prototype.removeClass = function(key) {
      var classes;
      classes = this.getClasses();
      return this.setClasses(_.without(classes, key));
    };

    Element.prototype.isWhitespace = function(str) {
      if (typeof str === 'string') {
        return str.trim() === '';
      } else {
        return true;
      }
    };

    Element.prototype.html = function(str) {
      var child, elt, _i, _len, _ref, _results;
      if (arguments.length === 0) {
        return Node.serializer().innerHTML(this);
      } else {
        elt = Node.parser().parseElement('<div>' + str + '</div>', this.ownerDocument);
        this.empty();
        _ref = elt._children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(this.append(child));
        }
        return _results;
      }
    };

    Element.prototype.getCSS = function() {
      var key, keyval, result, val, _i, _len, _ref, _ref1;
      result = {};
      _ref = this.attr('style').split(/\s*;\s*/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        keyval = _ref[_i];
        _ref1 = keyvals.split(/\s*=\s*/), key = _ref1[0], val = _ref1[1];
        result[key] = val;
      }
      return result;
    };

    Element.prototype.setCSS = function(keyvals) {
      var key, result, val;
      result = [];
      for (key in keyvals) {
        val = keyvals[key];
        result.push = "" + key + "=" + val;
      }
      return this.attr('style', result.join(";"));
    };

    Element.prototype.css = function(key, val) {
      var keyvals, result;
      if (arguments.length === 0) {
        throw new Error(".css_expects_at_least_1_arg");
      } else if (arguments.length === 1) {
        if (typeof key === 'string') {
          result = this.getCSS();
          return result[key];
        } else if (key instanceof Object) {
          return this.setCSS(key);
        } else {
          throw new Error("unsupported_css_argument: " + key);
        }
      } else {
        keyvals = this.getCSS();
        keyvals[key] = val;
        return this.setCSS(keyvals);
      }
    };

    Element.prototype.outerHTML = function() {
      return Node.serializer().outerHTML(this);
    };

    Element.prototype.text = function() {
      if (arguments.length === 0) {
        return Node.serializer().toText(this);
      } else {
        this.empty();
        return this.append(arguments[0].toString());
      }
    };

    Element.prototype.toJSON = function() {
      return Node.serializer().toJSON(this);
    };

    Element.prototype.serialize = function(options) {
      return Node.serializer().outerHTML(this, options);
    };

    Element.prototype.hasBinding = function() {
      return this.bindings !== null;
    };

    Element.prototype.empty = function() {
      var child, i, _i, _len, _ref;
      _ref = this._children;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        child = _ref[i];
        if (child instanceof Element) {
          child.empty();
          child._parent = null;
        }
      }
      return this._children = [];
    };

    Element.prototype.escape = function(str) {
      return entities.encode(str.toString());
    };

    Element.prototype.bind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Element.prototype.unbind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Element.prototype.on = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    Element.prototype.val = function(value) {
      if (arguments.length === 0) {
        if (this.tag === 'input' || this.tag === 'textarea' || this.tag === 'select') {
          if (this.attributes.hasOwnProperty('value')) {
            return this.attributes['value'];
          } else {
            return void 0;
          }
        }
      } else {
        if (this.tag === 'input' || this.tag === 'textarea' || this.tag === 'select') {
          return this.attributes.value = value;
        } else {

        }
      }
    };

    return Element;

  })(EventEmitter);

  Node.register(Node.ELEMENT_NODE, Element);

  Document.Element = Element;

  module.exports = Element;

}).call(this);
