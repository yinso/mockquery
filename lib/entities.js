// Generated by CoffeeScript 1.4.0
(function() {
  var Entities, defaultEntities, entities, loglet;

  loglet = require('loglet');

  Entities = (function() {

    function Entities() {
      this.decodeMap = {};
      this.encodeMap = {};
      this.encodeRegex = /(?:)/;
    }

    Entities.prototype.register = function(entity, txt) {
      var normed;
      normed = this.normalize(entity);
      this.decodeMap[normed] = txt;
      this.encodeMap[txt] = "&" + normed + ";";
      this._buildEncodeRegex();
      return loglet.debug('Entities.register', this.encodeRegex, this.encodeMap, this.decodeMap);
    };

    Entities.prototype.unicode = function(num) {
      var hex, i;
      hex = num.toString(16);
      if (hex.length < 4) {
        return '\\u' + ((function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = 4 - hex.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push('0');
          }
          return _results;
        })()).join('') + hex;
      } else {
        return '\\u' + hex;
      }
    };

    Entities.prototype._buildEncodeRegex = function() {
      var key, keys, val;
      keys = (function() {
        var _ref, _results;
        _ref = this.encodeMap;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push('\\' + key);
        }
        return _results;
      }).call(this);
      return this.encodeRegex = new RegExp(keys.join('|'), 'g');
    };

    Entities.prototype.registerEntities = function(entities) {
      var entity, txt, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        _ref = entities[_i], entity = _ref[0], txt = _ref[1];
        _results.push(this.register(entity, txt));
      }
      return _results;
    };

    Entities.prototype.normalize = function(entity) {
      return entity.replace(/^&([^;]+);$/, '$1');
    };

    Entities.prototype.decode = function(txt) {
      var self;
      self = this;
      return txt.replace(/&([^;]+);/g, function(match, p1) {
        if (self.decodeMap.hasOwnProperty(p1)) {
          return self.decodeMap[p1];
        } else if (p1.match(/^\d+$/)) {
          return String.fromCharCode(parseInt(p1));
        } else if (p1.match(/^x[0-9a-fA-F]+$/)) {
          return String.fromCharCode(parseInt("0" + p1));
        } else {
          throw new Error("unknown_html_entity " + match);
        }
      });
    };

    Entities.prototype.encode = function(txt) {
      var self;
      self = this;
      return txt.replace(this.encodeRegex, function(match) {
        loglet.debug('encode', match, self.encodeMap[match]);
        if (self.encodeMap.hasOwnProperty(match)) {
          return self.encodeMap[match];
        } else {
          return match;
        }
      });
    };

    return Entities;

  })();

  entities = new Entities();

  defaultEntities = [['&amp;', '&'], ['&lt;', '<'], ['&gt;', '>'], ['&quot;', '"'], ['&apos;', "'"], ['&nbsp;', String.fromCharCode(160)], ['&iexcl;', '¡'], ['&cent;', '¢'], ['&pound;', '£'], ['&curren;', '¤'], ['&copy;', '©'], ['&reg;', '®']];

  entities.registerEntities(defaultEntities);

  module.exports = entities;

}).call(this);
