// Generated by CoffeeScript 1.4.0
(function() {
  var Entities, entities, entityList, loglet;

  loglet = require('loglet');

  entityList = require('../entities.json');

  loglet.debug('entity.list', entityList);

  Entities = (function() {

    function Entities() {
      this.decodeMap = {};
      this.encodeMap = {};
      this.encodeRegex = /(?:)/;
    }

    Entities.prototype.register = function(entity, txt) {
      var normed;
      normed = this.normalize(entity);
      if (typeof txt === 'number') {
        txt = this.fromCharCode(txt);
      }
      this.decodeMap[normed] = txt;
      this.encodeMap[txt] = "&" + normed + ";";
      this._buildEncodeRegex();
      return loglet.debug('Entities.register', this.encodeRegex, this.encodeMap, this.decodeMap);
    };

    Entities.prototype.fromCharCode = function(num) {
      return String.fromCharCode(num);
    };

    Entities.prototype.unicode = function(num) {
      var hex, i;
      hex = num.toString(16);
      if (hex.length < 4) {
        return '\\u' + ((function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = 4 - hex.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push('0');
          }
          return _results;
        })()).join('') + hex;
      } else {
        return '\\u' + hex;
      }
    };

    Entities.prototype._buildEncodeRegex = function() {
      var key, keys, val;
      keys = (function() {
        var _ref, _results;
        _ref = this.encodeMap;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push('\\' + key);
        }
        return _results;
      }).call(this);
      return this.encodeRegex = new RegExp(keys.join('|'), 'g');
    };

    Entities.prototype.registerEntities = function(entities) {
      var entity, txt, _i, _len, _ref, _results, _results1;
      if (entities instanceof Array) {
        _results = [];
        for (_i = 0, _len = entities.length; _i < _len; _i++) {
          _ref = entities[_i], entity = _ref[0], txt = _ref[1];
          _results.push(this.register(entity, txt));
        }
        return _results;
      } else if (entities instanceof Object) {
        _results1 = [];
        for (entity in entities) {
          txt = entities[entity];
          _results1.push(this.register(entity, txt));
        }
        return _results1;
      } else {
        throw {
          error: 'unknown_entity_list',
          value: entities
        };
      }
    };

    Entities.prototype.normalize = function(entity) {
      return entity.replace(/^&([^;]+);$/, '$1');
    };

    Entities.prototype.decode = function(txt) {
      var self;
      self = this;
      return txt.replace(/&([^;]+);/g, function(match, p1) {
        var char, code;
        loglet.debug('entities.decode', txt, match, p1);
        if (self.decodeMap.hasOwnProperty(p1)) {
          return self.decodeMap[p1];
        } else if (p1.match(/^#\d+$/)) {
          code = parseInt(p1.substring(1));
          char = self.fromCharCode(code);
          loglet.debug('entities.decode.charCode', code, char);
          return char;
        } else if (p1.match(/^#x[0-9a-fA-F]+$/)) {
          code = parseInt('0' + p1.substring(1));
          char = self.fromCharCode(code);
          loglet.debug('entities.decode.hexCode', code, char);
          return char;
        } else {
          throw new Error("unknown_html_entity " + match);
        }
      });
    };

    Entities.prototype.encodeNumeric = function(str) {
      switch (str) {
        case '>':
          return '&gt;';
        case '<':
          return '&lt;';
        case '&':
          return '&amp;';
        case '\'':
          return '&apos;';
        case '"':
          return '&quot;';
        default:
          return '&#' + str.charCodeAt(0) + ';';
      }
    };

    Entities.prototype.encodeBasic = function(str) {
      switch (str) {
        case '>':
          return '&gt;';
        case '<':
          return '&lt;';
        case '&':
          return '&amp;';
        case '\'':
          return '&apos;';
        case '"':
          return '&quot;';
        default:
          return str;
      }
    };

    Entities.prototype.encode = function(txt, options) {
      var self;
      if (options == null) {
        options = {};
      }
      self = this;
      return txt.replace(this.encodeRegex, function(match) {
        loglet.debug('encode', match, self.encodeMap[match]);
        if (options.numericEntity) {
          return self.encodeNumeric(match);
        } else if (options.basicEntity) {
          return self.encodeBasic(match);
        } else if (self.encodeMap.hasOwnProperty(match)) {
          return self.encodeMap[match];
        } else {
          return match;
        }
      });
    };

    return Entities;

  })();

  entities = new Entities();

  entities.registerEntities(entityList.xml);

  entities.registerEntities(entityList.html32);

  entities.registerEntities(entityList.html40);

  module.exports = entities;

}).call(this);
