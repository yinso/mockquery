// Generated by CoffeeScript 1.4.0
(function() {
  var Document, Element, EventEmitter, MockQuery, Parser, Selector, fs, getJSON, http, https, kvs, load, path, postJSON, qs, readFile, readFileSync, statusCodeToError, url, _,
    __slice = [].slice;

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  Document = require('./document');

  Element = Document.Element;

  Selector = Document.Selector;

  Parser = require('./covalent');

  http = require('http');

  https = require('https');

  url = require('url');

  kvs = require('./kvs');

  qs = require('querystring');

  fs = require('fs');

  path = require('path');

  MockQuery = (function() {

    function MockQuery(elements, context) {
      var elt, i, _i, _len;
      this.context = context;
      for (i = _i = 0, _len = elements.length; _i < _len; i = ++_i) {
        elt = elements[i];
        this[i] = elt;
        this.length = elements.length;
      }
    }

    MockQuery.prototype.html = function(htmlString) {
      var elt, i, _i, _len;
      if (arguments.length === 0) {
        if (this.length > 0) {
          return this[0].html();
        } else {
          return null;
        }
      } else {
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          elt = this[i];
          elt.html(htmlString);
        }
        return this;
      }
    };

    MockQuery.prototype.attr = function(key, val) {
      var elt, _i, _len;
      if (arguments.length === 1) {
        if (this.length > 0) {
          return this[0].attr(key);
        } else {
          return null;
        }
      } else {
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          elt = this[_i];
          elt.attr(key, val);
        }
        return this;
      }
    };

    MockQuery.prototype.bind = function() {
      var args, elt, i, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.bind.apply(elt, args);
      }
      return this;
    };

    MockQuery.prototype.unbind = function() {
      var args, elt, i, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.unbind.apply(elt, args);
      }
      return this;
    };

    MockQuery.prototype.css = function() {
      var arg, elt, i, _i, _len;
      arg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (arguments.length === 1) {
        if (this.length > 0) {
          return this[0].css(arg[0]);
        } else {
          return null;
        }
      } else {
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          elt = this[i];
          elt.css.apply(elt, arg);
        }
        return this;
      }
    };

    MockQuery.prototype.addClass = function(cls) {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.addClass(cls);
      }
      return this;
    };

    MockQuery.prototype.removeClass = function(cls) {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.removeClass(cls);
      }
      return this;
    };

    MockQuery.prototype.children = function() {
      if (this.length === 0) {
        return new MockQuery([], this.context);
      } else {
        return new MockQuery(this[0].children(), this.context);
      }
    };

    MockQuery.prototype.appendTo = function(parent) {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        parent.append(elt);
      }
      return this;
    };

    MockQuery.prototype.detach = function() {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.detach();
      }
      return this;
    };

    MockQuery.prototype.removeAttr = function(key) {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.removeAttr(key);
      }
      return this;
    };

    MockQuery.prototype.empty = function() {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.empty();
      }
      return this;
    };

    MockQuery.prototype.on = function() {
      return this;
    };

    MockQuery.prototype.filter = function(selector) {
      var elt, i, result, _i, _len;
      selector = new Selector(selector);
      result = [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        if (elt instanceof Document) {
          selector.matchOne(elt.documentElement, result);
        } else {
          selector.matchOne(elt, result);
        }
      }
      return new MockQuery(result, this.context);
    };

    MockQuery.prototype.add = function(selector, context) {
      var results, sel;
      if (context == null) {
        context = this.context;
      }
      sel = new Selector(selector);
      results = sel.run(context);
      return new MockQuery(this.toArray().concat(results), this.context);
    };

    MockQuery.prototype.toArray = function() {
      var elt, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        elt = this[_i];
        _results.push(elt);
      }
      return _results;
    };

    MockQuery.prototype.has = function(selector) {
      var elt, result, _i, _j, _len, _len1;
      if (selector instanceof Element) {
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          elt = this[_i];
          if (elt === selector) {
            return new MockQuery([elt], this.context);
          }
        }
        return new MockQuery([], this.context);
      } else {
        selector = new Selector(selector);
        result = [];
        for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
          elt = this[_j];
          selector.match(elt, result);
        }
        return new MockQuery(result, this.context);
      }
    };

    MockQuery.prototype.data = function(key, val) {
      var elt, i, _i, _len, _results;
      if (arguments.length === 1) {
        if (this.length === 0) {
          return null;
        } else {
          return this[0].data(key);
        }
      } else {
        _results = [];
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          elt = this[i];
          _results.push(elt.data(key, val));
        }
        return _results;
      }
    };

    MockQuery.prototype.remove = function() {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.detach();
      }
      return this;
    };

    MockQuery.prototype.clone = function() {
      var elements, elt, i;
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          elt = this[i];
          _results.push(elt.clone());
        }
        return _results;
      }).call(this);
      return new MockQuery(elements, this.context);
    };

    MockQuery.prototype.not = function(selector) {
      var elt, i, res, result, sel, _i, _j, _len, _len1;
      if (selector instanceof Array) {
        result = [];
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          elt = this[i];
          if (!_.contains(selector, elt)) {
            result.push(elt);
          }
        }
        return new MockQuery(result, this.context);
      } else if (typeof selector === 'string') {
        sel = new Selector(selector);
        result = [];
        for (i = _j = 0, _len1 = this.length; _j < _len1; i = ++_j) {
          elt = this[i];
          res = sel.matchOne(elt, result);
          if (!res) {
            result.push(elt);
          }
        }
        return new MockQuery(result, this.context);
      } else {
        throw new Error("unsupported_not_selector: " + selector);
      }
    };

    MockQuery.prototype.prepend = function(element) {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        if (i === 0) {
          elt.prepend(element);
        } else {
          elt.prepend(element.clone());
        }
      }
      return this;
    };

    MockQuery.prototype.append = function(element) {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        if (i === 0) {
          elt.append(element);
        } else {
          elt.append(element.clone());
        }
      }
      return this;
    };

    MockQuery.prototype.after = function(element) {
      var elt, i, _i, _len;
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        elt = this[i];
        elt.after(element);
      }
      return this;
    };

    MockQuery.prototype.val = function(value) {
      var elt, i, _i, _len;
      if (arguments.length === 0) {
        if (this.length > 0) {
          return this[0].val();
        }
      } else {
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          elt = this[i];
          elt.val(value);
        }
        return this;
      }
    };

    MockQuery.prototype.index = function() {
      if (this.length === 0) {
        return null;
      } else {
        if (!this[0]._parent) {
          return 0;
        } else {
          return this[0]._parent.children().indexOf(this[0]);
        }
      }
    };

    return MockQuery;

  })();

  statusCodeToError = function(statusCode) {
    if (statusCode >= 500) {
      return new Error("server_error: " + statusCode);
    } else if (statusCode >= 400) {
      return new Error("bad_request: " + statusCode);
    } else if (statusCode >= 300) {
      return null;
    } else if (statusCode >= 200) {
      return null;
    } else {
      return null;
    }
  };

  getJSON = function(uri, data, cb) {
    /*
      if arguments.length == 2
        cb = data
        data = {}
      try
        data = kvs.flatten data
        options = url.parse uri
        options.query = _.extend {}, options.query, data
        console.log 'getJSON', uri, options
        protocol =
          if options.protocol == 'https:'
            https
          else if options.protocol == 'http:'
            http
          else
            throw new Error("unsupported_protocol: #{uri}")
        req = protocol.request options, (res) ->
          output = []
          res.setEncoding 'utf8'
          res.on 'data', (chunk) ->
            console.log 'getJSON.response.chunk', chunk
            output.push chunk
          res.on 'end', () ->
            try
              obj = JSON.parse output.join('')
              console.log 'getJSON.response.end', obj
              cb obj, res.statusCode
            catch e
              cb e, 500
        req.on 'error', cb
      catch e
        cb e, 500
    */

  };

  postJSON = function(uri, data, cb) {
    /*
      if arguments.length == 2
        cb = data
        data = {}
      try
        data = kvs.flatten data
        options = url.parse uri
        protocol =
          if options.protocol == 'https'
            https
          else if options.protocol == 'http'
            http
          else
            throw new Error("unsupported_protocol: #{uri}")
        req = protocol.request options, (res) ->
          output = []
          res.setEncoding 'utf8'
          res.on 'data', (chunk) ->
            output.push chunk
          res.on 'end', () ->
            try
              obj = JSON.parse output.join('')
              cb obj, res.statusCode
            catch e
              cb e, 500
        req.on 'error', cb
        query = qs.stringify(data)
        req.setHeader 'Content-Type', 'application/x-www-form-urlencoded'
        req.setHeader 'Content-Length', query.length
        req.write query
        req.end()
      catch e
        cb e, 500
    */

  };

  load = function(document) {
    var jQuery;
    if (typeof document === 'string') {
      document = new Document(document);
    }
    jQuery = function(selector, context) {
      var elt;
      if (context == null) {
        context = document;
      }
      if (selector instanceof Element) {
        return new MockQuery([selector], document);
      } else if (selector instanceof Document) {
        return new MockQuery([selector], document);
      } else if (selector.match(/<[^>]+>/)) {
        elt = document.createElement(Parser.parse('<div>' + selector + '</div>'));
        return new MockQuery(elt.children(), document);
      } else {
        selector = new Selector(selector);
        return new MockQuery(selector.run(document, false), document);
      }
    };
    jQuery.getJSON = getJSON;
    return jQuery;
  };

  readFile = function(path, cb) {
    return fs.readFile(path, 'utf8', function(err, data) {
      if (err) {
        return cb(err);
      } else {
        return cb(null, load(data));
      }
    });
  };

  readFileSync = function(path) {
    return load(fs.readFileSync(path, 'utf8'));
  };

  module.exports = {
    load: load,
    readFile: readFile,
    readFileSync: readFileSync
  };

}).call(this);
