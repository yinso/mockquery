// Generated by CoffeeScript 1.4.0
(function() {
  var Document, Parser, Selector, loglet, _;

  Document = require('./document');

  Parser = require('../grammar/selector');

  _ = require('underscore');

  loglet = require('loglet');

  Selector = (function() {

    Selector.parse = function(stmt) {
      return new Selector(stmt);
    };

    function Selector(stmt) {
      this.select = Parser.parse(stmt).select;
      loglet.debug('Selector.ctor', this.select);
      this.matchExp = this.compile(this.select);
    }

    Selector.prototype.negate = function() {
      var origMatchExp;
      origMatchExp = this.matchExp;
      this.matchExp = function(element) {
        return !origMatchExp(element);
      };
      return this.select.not = this.select.hasOwnProperty('not') ? !this.select.not : true;
    };

    Selector.prototype.run = function(elt, includeSelf) {
      var result;
      if (includeSelf == null) {
        includeSelf = false;
      }
      result = [];
      this.match(elt, result, includeSelf);
      return result;
    };

    Selector.prototype.match = function(element, result, includeSelf) {
      var child, _i, _len, _ref, _results;
      if (includeSelf == null) {
        includeSelf = false;
      }
      if (element instanceof Document) {
        element = element.documentElement;
      }
      if (includeSelf) {
        this.matchOne(element, result);
      }
      _ref = element.children();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(this.match(child, result, true));
      }
      return _results;
    };

    Selector.prototype.matchOne = function(element, result) {
      var res;
      res = this.matchExp(element);
      if (res) {
        result.push(element);
        return true;
      } else {
        return false;
      }
    };

    Selector.prototype.compile = function(selectExp) {
      if (selectExp instanceof Array) {
        return this.compileArray(selectExp);
      } else {
        return this.compileOne(selectExp);
      }
    };

    Selector.prototype.compileArray = function(selectExp) {
      var inner, matchExps,
        _this = this;
      matchExps = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selectExp.length; _i < _len; _i++) {
          inner = selectExp[_i];
          _results.push(this.compile(inner));
        }
        return _results;
      }).call(this);
      return function(element) {
        var match, _i, _len;
        for (_i = 0, _len = matchExps.length; _i < _len; _i++) {
          match = matchExps[_i];
          if (match(element)) {
            return true;
          }
        }
        return false;
      };
    };

    Selector.prototype.compileOne = function(exp) {
      var attrExp, classExp, eltExp, idExp, pseudoExp;
      eltExp = this.compileTag(exp.elt);
      idExp = this.compileID(exp.id);
      classExp = this.compileClass(exp["class"]);
      attrExp = this.compileAttr(exp.attr);
      pseudoExp = this.compilePseudo(exp.pseudo);
      return function(element) {
        var isAttr, isCls, isElt, isID, isPseudo;
        isElt = eltExp(element);
        isID = idExp(element);
        isCls = classExp(element);
        isAttr = attrExp(element);
        isPseudo = pseudoExp(element);
        return isElt && isID && isCls && isAttr && isPseudo;
      };
    };

    Selector.prototype.compileTag = function(tag) {
      if (tag === '*') {
        return function(element) {
          return true;
        };
      } else {
        return function(element) {
          return element.tag === tag;
        };
      }
    };

    Selector.prototype.compileID = function(id) {
      if (id instanceof Array) {
        return function(element) {
          return _.contains(id, element.attributes['id']);
        };
      } else if (typeof id === 'string') {
        return function(element) {
          return element.attributes['id'] === id;
        };
      } else {
        return function(element) {
          return true;
        };
      }
    };

    Selector.prototype.compileClass = function(classes) {
      var classExps, cls;
      if (classes instanceof Array) {
        classExps = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = classes.length; _i < _len; _i++) {
            cls = classes[_i];
            _results.push(this.compileOneClass(cls));
          }
          return _results;
        }).call(this);
        return function(element) {
          var classExp, _i, _len;
          for (_i = 0, _len = classExps.length; _i < _len; _i++) {
            classExp = classExps[_i];
            if (classExp(element)) {
              return true;
            }
          }
          return false;
        };
      } else if (typeof classes === 'string') {
        return this.compileOneClass(classes);
      } else if (classes instanceof Object) {
        return this.compileOneClass(classes["class"]);
      } else {
        return function(element) {
          return true;
        };
      }
    };

    Selector.prototype.compileOneClass = function(cls) {
      return function(element) {
        var eltClasses, res;
        eltClasses = element.getClasses();
        res = _.contains(eltClasses, cls);
        return res;
      };
    };

    Selector.prototype.compileAttr = function(attrs) {
      var attr, attrExps;
      if (attrs instanceof Array) {
        attrExps = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = attrs.length; _i < _len; _i++) {
            attr = attrs[_i];
            _results.push(this.compileOneAttr(attr));
          }
          return _results;
        }).call(this);
        return function(element) {
          var attrExp, _i, _len;
          for (_i = 0, _len = attrExps.length; _i < _len; _i++) {
            attrExp = attrExps[_i];
            if (!attrExp(element)) {
              return false;
            }
          }
          return true;
        };
      } else if (attrs instanceof Object) {
        return this.compileOneAttr(attrs);
      } else {
        return function(element) {
          return true;
        };
      }
    };

    Selector.prototype.compileOneAttr = function(_arg) {
      var arg, attr, op, regex, valExp;
      attr = _arg.attr, op = _arg.op, arg = _arg.arg;
      valExp = (function() {
        if (arg) {
          if (op === '=') {
            return function(attr) {
              return attr === arg;
            };
          } else if (op === '~=') {
            regex = new RegExp(arg);
            return function(attr) {
              return attr.match(regex);
            };
          } else if (op === '^=') {
            regex = new RegExp("^" + arg);
            return function(attr) {
              return attr.match(regex);
            };
          } else if (op === "$=") {
            regex = new RegExp("" + arg + "$");
            return function(attr) {
              return attr.match(regex);
            };
          } else if (op === '!=') {
            return function(attr) {
              return attr !== arg;
            };
          } else {
            throw new Error("unsupported_attribute_selector: " + attr + op + arg);
          }
        } else {
          return function(attr) {
            return true;
          };
        }
      })();
      return function(element) {
        if (!element.attributes.hasOwnProperty(attr)) {
          return false;
        }
        return valExp(element.attributes[attr]);
      };
    };

    Selector.prototype.compilePseudo = function(pseudos) {
      var pseudo, pseudoExps;
      loglet.debug('compilePseudo', pseudos);
      if (pseudos instanceof Array) {
        pseudoExps = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = pseudos.length; _i < _len; _i++) {
            pseudo = pseudos[_i];
            _results.push(this.compileOnePseudo(pseudo));
          }
          return _results;
        }).call(this);
        return function(element) {
          var pseudoExp, _i, _len;
          for (_i = 0, _len = pseudoExps.length; _i < _len; _i++) {
            pseudoExp = pseudoExps[_i];
            if (!pseudoExp(element)) {
              return false;
            }
          }
          return true;
        };
      } else if (pseudos instanceof Object) {
        return this.compileOnePseudo(pseudos);
      } else {
        return function(element) {
          return true;
        };
      }
    };

    Selector.prototype.compileOnePseudo = function(_arg) {
      var arg, args, innerExp, pseudo;
      pseudo = _arg.pseudo, args = _arg.args;
      loglet.debug('compileOnePseudo', pseudo, args);
      if (pseudo === 'not') {
        arg = args[0];
        innerExp = arg.id ? this.compileID(arg) : arg["class"] ? this.compileClass(arg) : arg.attr ? this.compileAttr(arg) : this.compilePseudo(arg);
        return function(elt) {
          var res;
          res = innerExp(elt);
          return !res;
        };
      } else if (pseudo === 'root') {
        loglet.debug('compileRootElementPseudo');
        return function(elt) {
          var _ref;
          loglet.debug('pseudoSelector:root', elt);
          return elt === ((_ref = elt.ownerDocument) != null ? _ref.documentElement : void 0);
        };
      } else {
        throw {
          pseudo_not_supported: pseudo,
          args: args
        };
      }
    };

    return Selector;

  })();

  module.exports = Selector;

}).call(this);
