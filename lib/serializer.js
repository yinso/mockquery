// Generated by CoffeeScript 1.4.0
(function() {
  var Node, entities, innerHTML, loglet, outerHTML, serializer, _attrsToString, _toHTML;

  Node = require('./node');

  entities = require('./entities');

  loglet = require('loglet');

  outerHTML = function(node) {
    var Document, Element, buffer;
    Element = Node.type(Node.ELEMENT_NODE);
    Document = Node.type(Node.DOCUMENT_NODE);
    buffer = [];
    _toHTML(node, buffer);
    return buffer.join('');
  };

  innerHTML = function(node) {
    var Document, Element, buffer, child, _i, _len, _ref;
    Element = Node.type(Node.ELEMENT_NODE);
    Document = Node.type(Node.DOCUMENT_NODE);
    buffer = [];
    _ref = node._children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _toHTML(child, buffer);
    }
    return buffer.join('');
  };

  _attrsToString = function(attributes) {
    var buffer, key, val;
    if (attributes == null) {
      attributes = {};
    }
    buffer = (function() {
      var _results;
      _results = [];
      for (key in attributes) {
        val = attributes[key];
        if (!(val === null || val === void 0)) {
          _results.push("" + key + " = \"" + (entities.encode(val)) + "\"");
        } else {
          _results.push('');
        }
      }
      return _results;
    })();
    return buffer.join(' ');
  };

  _toHTML = function(node, buffer) {
    var attrStr, child, _i, _len, _ref;
    if (typeof node === 'string') {
      buffer.push(entities.encode(node));
      return;
    }
    attrStr = _attrsToString(node.attributes);
    buffer.push('<', node.tag);
    if (attrStr !== '') {
      buffer.push(' ', attrStr);
    }
    if (node._children.length === 0) {
      return buffer.push(' />');
    } else {
      buffer.push('>');
      _ref = node._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          buffer.push(entities.encode(child));
        } else {
          _toHTML(child, buffer);
        }
      }
      return buffer.push("</" + node.tag + ">");
    }
  };

  serializer = {
    outerHTML: outerHTML,
    innerHTML: innerHTML
  };

  Node.registerSerializer(serializer);

  module.exports = serializer;

}).call(this);
